---
title: "Hands-on Git/GitHub Tutorial"
author: "Brian Fannin"
format: pptx
editor: visual
---

## Why Git?

-   Replaces "filename" as a version control system

-   Microsoft Office "Track Changes"

    -   Comments and changes are either all in, or all out

    -   Only one file at a time

    -   Nonexistent for spreadsheets

-   Git

    -   Full history of changes

    -   Comments

    -   Possible to revert

## Prerequisites

-   [Git](https://git-scm.com/)

-   GUI Clients

    -   [Github Desktop (GitHub)](https://desktop.github.com/)

    -   [Sourcetree (Atlassian)](https://www.sourcetreeapp.com/)

-   Command Line Interface (Terminal)

    -   Gitbash

## Prerequisites

-   IDE

    -   [RStudio](https://posit.co/products/open-source/rstudio/)

    -   [Visual Studio Code](https://code.visualstudio.com/)

-   Create an account for Cloud-based Code Repository

    -   [GitHub](https://github.com/)

    -   [Bitbucket](https://bitbucket.org/)

## Exercise #1: Git Basics

1.  Configuration

    -   `git config --global user.name "<user name>"`

2.  Create a repository

    -   `git init`

3.  Create a .gitignore (plain text file) and add to your repository

    -   `git add -A -- <repo folder>.gitignore`

## Exercise #2: Local Version Control

### Commit and Revert

1.  Create a plain text file in any format (.txt, .R, .py, etc.)

2.  Stage files

    -   `git add -all`

3.  Commit your changes - Record changes to the repository

    -   `git commit -m <msg>`

4.  Make a minor change and add and commit (one step)

    -   `git commit -a -m <msg>`

## Exercise #2: Local Version Control (continued)

### Commit and Revert

5.  Make a minor change and add and commit (one step); then undo the revert

    -   `git commit -a -m <msg>`
    -   `git revert`

## Exercise #3: Collaborating in the Cloud

### Publish your repository to the Cloud

To collaborate with internal or external users, you will need to publish your repository. The most popular cloud repositories are GitHub (now owned by Microsoft) and Bitbucket (Atlassian).

`git remote add origin <REMOTE_URL>`

`# Sets the new remote`

`git remote -v`

`` # Verifies the new remote URL` ``

Confirm that the repository is `public`

## Collaborating in the Cloud: Forks and Clones

-   A fork creates a completely independent copy of Git repository.

-   A clone creates a linked copy that will continue to synchronize with the target repository

-   Push your changes to the cloud

-   Pull changes to your repository

    -   "Pull" v. "Pull Request"

## Exercise #4: Collaboration via clones (Internal)

You will need to work with a partner.

1.  Navigate to your partner's repository

2.  Clone the repository

    -   `git clone <repo> <directory>`

3.  Make some minor changes, commit and push

    -   `git add` or `git commit -a`
    -   `git push`

4.  Pull your partner's changes to your repo

    -   `git fetch` / `git pull`

## Exercise #5: Collaboration via forks (external)

You will need to work with a partner.

1.  Navigate to your partner's repository

2.  Fork the repository in the cloud. This will create a new repository under your user name with the same name as the original.

3.  Clone the repository locally

    -   `git clone <repo> <directory>`

## Exercise #5: Collaboration via forks (external)

4.  Make some minor changes, commit and push

    -   `git add` or `git commit -a`
    -   `git push`

5.  Request that your partner accepts your changes via a pull request in the cloud.

6.  Accept your partner's pull request to your repository.

## Questions

This presentation is a Quorto Presentation and is available in this repository:

<https://github.com/rajesh06/iCas-Github-tutorial>

[Brian Fannin, CAS](mailto:bfannin@casact.org)

[Rajesh Sahasrabddhe, Oliver Wyman](mailto:rajesh.sahasrabuddhe@oliverwyman.com)
