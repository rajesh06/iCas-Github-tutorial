---
title: "Hands-on Git/GitHub Tutorial"
author: "Brian Fannin"
format: pptx
editor: visual
---

## Why Git?

-   Replaces "filename" as a version control system

-   Microsoft Office "Track Changes"

    -   Comments and changes are either all in, or all out

    -   Only one file at a time

    -   Nonexistent for spreadsheets

-   Git

    -   Full history of changes

    -   Comments

    -   Possible to revert

## Prerequisites

-   [Git](https://git-scm.com/)

-   GUI Clients

    -   [Github Desktop (GitHub)](https://desktop.github.com/)

    -   [Sourcetree (Atlassian)](https://www.sourcetreeapp.com/)

-   Command Line Interface (Terminal)

    -   Gitbash

## Prerequisites

-   IDE

    -   [RStudio](https://posit.co/products/open-source/rstudio/)

    -   [Visual Studio Code](https://code.visualstudio.com/)

-   Cloud-based Code Repository

    -   [GitHub](https://github.com/)

    -   [Bitbucket](https://bitbucket.org/)

## Exercise #1: Git Basics

`git config --global user.name "<user name>"`

Create a repository

`git init`

Create a .gitignore (plain text file) and add to your repository

`git add -A -- <repo folder>.gitignore`

## Exercise #2: Local Version Control - Commit and Revert

1.  Create a plain text file in any format (.txt, .R, .py, etc.)

2.  Stage files

    -   `git add -all`

3.  Commit your changes - Record changes to the repository

    -   `git commit`

[git-commit](https://git-scm.com/docs/git-commit) - Record changes to the repository

Basic

## Collaborating in the Cloud Exercise #1: Forks and Clones

-   A fork creates a completely independent copy of Git repository.

-   A clone creates a linked copy that will continue to synchronize with the target repository
